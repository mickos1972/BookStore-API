@page "/Register"
@using BookStoreUI.Models
@using BookStoreUI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _nav

<div class="card">
    <h3 class="card-title">Register now!</h3>

    @if (isFailed)
    {
        <div class="alert alert-danger">
            <p>its all knackered</p>
        </div>
    }

    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>

            <div class="form-group">
                <label for="conformPassword">Confirm Password</label>
                <InputText id="confirmPassword" class="form-control" @bind-Value="Model.ConfirmPassword" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    bool isFailed = false;

    private RegistrationModel Model = new RegistrationModel();

    private async Task HandleRegistration()
    {

        var response = await _authRepo.Register(Model);

        if (response)
            _nav.NavigateTo("/");
        else
            isFailed = true;
    }
}
